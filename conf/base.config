
// Job paramaters to set for this environment

params.scratch = false

// Resource manager settings

// Process setting

process {

  // Global cluster parameters
  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus == 143 ? 'retry' : 'finish' }
  maxRetries = 3
  maxErrors = '-1'
 
  // Specific cluster parameters for each process

	withLabel: fastp {
		container = "docker://quay.io/biocontainers/fastp:0.20.1--h8b12597_0"
	}
	withLabel: samtools {
		container = "docker://quay.io/biocontainers/samtools:1.10--h9402c20_2"
	}
	withLabel: bwa {
		container = "docker://ikmb/wgs-calling:1.1"
	}
	withLabel: deepvariant {
		container = "docker://google/deepvariant:1.0.0"
	}
	withLabel: rtgtools {
		container = "docker://quay.io/biocontainers/rtg-tools:3.11--0"
	}
	withLabel: glnexus {
		container = "docker://quay.io/mlin/glnexus:v1.3.1"
	}	

        withLabel: mosdepth {
                container = "quay.io/biocontainers/mosdepth:0.2.9--hbeb723e_1"
        }
        withLabel: multiqc {
                container = "docker://quay.io/biocontainers/multiqc:1.9--py_1"
        }
	withLabel: freebayes {
                container = "docker://quay.io/biocontainers/freebayes:1.3.2--py37h26878c9_2"
	}

	withName:runFastp {
		cpus = params.max_cpus
		time = { check_max( 12.h * task.attempt, 'time' ) }
		memory = { check_max( 8.GB * task.attempt, 'memory' ) }
	}
	withName:runBwa {
		memory = { check_max( 64.GB * task.attempt, 'memory' ) }
		time = { check_max( 96.h * task.attempt, 'time' ) }
		cpus = params.max_cpus
	}
	withName:runMD {
		memory = { check_max( 32.GB * task.attempt, 'memory' ) }
		cpus = { check_max( 4 * task.attempt, 'cpus' ) }
		time = { check_max( 72.h * task.attempt, 'time' ) }
	}
	withName: runFreebayesMT {
		memory = { check_max( 16.GB * task.attempt, 'memory' ) }
                time = { check_max( 72.h * task.attempt, 'time' ) }
        }

	withName:runDeepvariant {
		time = { check_max( 60.h * task.attempt, 'time' ) }
                memory = { check_max(32.GB * task.attempt, 'memory' ) }
                cpus = 24
	}
	withName: runMergeGvcf {
		cpus = { check_max( 16 * task.attempt, 'cpus' ) }
		memory = { 48.GB * task.attempt }
                time = { 72.h * task.attempt }
	}
	withName: runWgsCoverage {
		memory = { 12.GB * task.attempt }
                cpus = 8
                time = { 12.h * task.attempt }
	}
	withName: VcfGetSample {
		memory = { 12.GB * task.attempt }
                cpus = 8
                time = { 12.h * task.attempt }
	}

}


