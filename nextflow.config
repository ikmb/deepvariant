params {

	genome = "GRCh38"

	run_name = false

	pacbio = false
	
	intervals = false

	joint_calling = false
	
	outdir = "results"

	max_memory = 250.GB
	max_cpus = 24
	max_time = 240.h
	maxMultiqcEmailFileSize = 25.MB

}

container = "docker://ikmb/deepvariant:latest"

profiles {
	standard {
                includeConfig 'conf/base.config'
		includeConfig 'conf/medcluster.config'
                includeConfig 'conf/resources.config'
	}
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

manifest {
	homePage = 'https://github.com/ikmb/deepvariant'
	description = 'This pipeline collection performs best-practice variant calling on WGS data.'
	mainScript = 'main.nf'
	version = '0.3'
	nextflowVersion = '21.05.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
