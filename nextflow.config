params {

    help        = false
	  assembly    = "hg38"
	  pacbio      = false 
	  short_read_aligner     = "vg"
	  run_name    = false
	
	  glnexus_config = "DeepVariant"

    joint_calling = false

	  scratch     = true

	  tools       = null

	  intervals   = false

  	center      = "CCGA"
	
	  outdir      = "results"

	  max_memory  = 256.GB
	  max_cpus    = 20
	  max_time    = 240.h

	  maxMultiqcEmailFileSize = 25.MB

	  dv_model = false

}

container = "docker://ikmb/deepvariant:1.7"

profiles {
    standard {
        includeConfig 'conf/medcluster.config'
        includeConfig 'conf/base.config'
        includeConfig 'conf/resources.config'
    }
    diagnostic {
        includeConfig 'conf/diagnostic.config'
        includeConfig 'conf/base.config'
        includeConfig 'conf/resources.config'
    }
    test {
        includeConfig 'conf/test.config'
        includeConfig 'conf/base.config'
        includeConfig 'conf/resources.config'
    }
}

timeline {
        enabled = true
        file = "${params.outdir}/pipeline_info/wgs-pipeline_timeline.html"
}
report {
        enabled = true
        file = "${params.outdir}/pipeline_info/wgs-pipeline_report.html"
}
trace {
        enabled = true
        file = "${params.outdir}/pipeline_info/wgs-pipeline_trace.txt"
}
dag {
        enabled = true
        file = "${params.outdir}/pipeline_info/wgs-pipeline_dag.svg"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

manifest {
	homePage = 'https://github.com/ikmb/deepvariant'
	description = 'This pipeline collection performs best-practice variant calling on WGS data.'
	mainScript = 'main.nf'
	version = '1.8'
	nextflowVersion = '22.10.0'
}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 20
  max_time = 240.h
  maxMultiqcEmailFileSize = 25.MB

}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
